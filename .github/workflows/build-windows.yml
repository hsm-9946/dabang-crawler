name: Build Windows Executable

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # 수동 실행 가능

jobs:
  build-windows:
    runs-on: windows-latest
    
    strategy:
      matrix:
        python-version: [3.12]  # 빌드 시간 단축을 위해 3.12만 사용
    
    env:
      # Windows 한국어 환경 설정
      PYTHONIOENCODING: utf-8
      PYTHONUTF8: 1
      # Windows 시스템 로케일 설정
      SYSTEMROOT: C:\Windows
      WINDIR: C:\Windows
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v4  # v3에서 v4로 업데이트
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        playwright install chromium
        playwright install-deps chromium
        
    - name: Create build directory
      run: |
        mkdir build
        mkdir dist
        mkdir output
        mkdir logs
        
    - name: Build executables using spec file
      run: |
        # 바이러스 백신 오탐 방지를 위한 환경 변수 설정
        $env:PYTHONHASHSEED = "0"
        $env:PYTHONUNBUFFERED = "1"
        
        # PyInstaller 빌드 시 보안 옵션 추가
        pyinstaller build_config.spec --noconfirm --clean --distpath dist --workpath build
        if ($LASTEXITCODE -ne 0) {
          Write-Host "Spec 파일 빌드 실패, 기본 설정으로 재시도..."
          pyinstaller --onefile --windowed --name "다방크롤러" --icon "assets/icon.ico" --noconfirm --clean --distpath dist --workpath build app/gui.py
          pyinstaller --onefile --name "다방크롤러_CLI" --icon "assets/icon.ico" --noconfirm --clean --distpath dist --workpath build app/cli_collect.py
        }
        
        # 실행 파일 보안 검증
        Write-Host "=== 실행 파일 보안 검증 ===" -ForegroundColor Green
        if (Test-Path "dist/다방크롤러.exe") {
            $guiHash = Get-FileHash "dist/다방크롤러.exe" -Algorithm SHA256
            Write-Host "GUI 실행 파일 SHA256: $($guiHash.Hash)"
        }
        if (Test-Path "dist/다방크롤러_CLI.exe") {
            $cliHash = Get-FileHash "dist/다방크롤러_CLI.exe" -Algorithm SHA256
            Write-Host "CLI 실행 파일 SHA256: $($cliHash.Hash)"
        }
        
    - name: Create package directory
      run: |
        mkdir package
        mkdir package/config
        mkdir package/data
        mkdir package/logs
        mkdir package/output
        mkdir package/scraper
        
    - name: Copy files to package
      run: |
        # 실행 파일 복사
        if (Test-Path "dist/다방크롤러.exe") { Copy-Item "dist/다방크롤러.exe" "package/" }
        if (Test-Path "dist/다방크롤러_CLI.exe") { Copy-Item "dist/다방크롤러_CLI.exe" "package/" }
        
        # 설정 파일들
        if (Test-Path "config/settings.toml") { Copy-Item "config/settings.toml" "package/config/" }
        if (Test-Path "data/regions_kr.json") { Copy-Item "data/regions_kr.json" "package/data/" }
        
        # 스크래퍼 파일들
        if (Test-Path "scraper/selectors.json") { Copy-Item "scraper/selectors.json" "package/scraper/" }
        if (Test-Path "scraper/selectors_direct.json") { Copy-Item "scraper/selectors_direct.json" "package/scraper/" }
        if (Test-Path "scraper/selectors_enhanced.json") { Copy-Item "scraper/selectors_enhanced.json" "package/scraper/" }
        if (Test-Path "scraper/parsers.py") { Copy-Item "scraper/parsers.py" "package/scraper/" }
        if (Test-Path "scraper/anti_bot.py") { Copy-Item "scraper/anti_bot.py" "package/scraper/" }
        if (Test-Path "scraper/region_resolver.py") { Copy-Item "scraper/region_resolver.py" "package/scraper/" }
        if (Test-Path "scraper/dabang_scraper.py") { Copy-Item "scraper/dabang_scraper.py" "package/scraper/" }
        if (Test-Path "scraper/dabang_scraper_backup.py") { Copy-Item "scraper/dabang_scraper_backup.py" "package/scraper/" }
        if (Test-Path "scraper/dabang_selenium.py") { Copy-Item "scraper/dabang_selenium.py" "package/scraper/" }
        
        # 스크래퍼 utils 폴더
        if (Test-Path "scraper/utils") { 
            New-Item -ItemType Directory -Force -Path "package/scraper/utils"
            Copy-Item "scraper/utils/*" "package/scraper/utils/" -Recurse -Force
        }
        
        # 앱 파일들
        if (Test-Path "app") { 
            New-Item -ItemType Directory -Force -Path "package/app"
            Copy-Item "app/*" "package/app/" -Recurse -Force
        }
        
        # 스토리지 파일들
        if (Test-Path "storage") { 
            New-Item -ItemType Directory -Force -Path "package/storage"
            Copy-Item "storage/*" "package/storage/" -Recurse -Force
        }
        
        # TypeScript 파일들
        if (Test-Path "scripts") { 
            New-Item -ItemType Directory -Force -Path "package/scripts"
            Copy-Item "scripts/*" "package/scripts/" -Recurse -Force
        }
        
        # 도구 파일들
        if (Test-Path "tools") { 
            New-Item -ItemType Directory -Force -Path "package/tools"
            Copy-Item "tools/*" "package/tools/" -Recurse -Force
        }
        
        # 테스트 파일들
        if (Test-Path "tests") { 
            New-Item -ItemType Directory -Force -Path "package/tests"
            Copy-Item "tests/*" "package/tests/" -Recurse -Force
        }
        
        # realestate_dabang 모듈
        if (Test-Path "realestate_dabang") { 
            New-Item -ItemType Directory -Force -Path "package/realestate_dabang"
            Copy-Item "realestate_dabang/*" "package/realestate_dabang/" -Recurse -Force
        }
        
        # 루트 파일들
        if (Test-Path "README.md") { Copy-Item "README.md" "package/" }
        if (Test-Path "LICENSE") { Copy-Item "LICENSE" "package/" }
        if (Test-Path "requirements.txt") { Copy-Item "requirements.txt" "package/" }
        if (Test-Path "package.json") { Copy-Item "package.json" "package/" }
        if (Test-Path "package-lock.json") { Copy-Item "package-lock.json" "package/" }
        if (Test-Path "tsconfig.json") { Copy-Item "tsconfig.json" "package/" }
        if (Test-Path "create_icon.py") { Copy-Item "create_icon.py" "package/" }
        if (Test-Path "build_advanced.bat") { Copy-Item "build_advanced.bat" "package/" }
        if (Test-Path "build_local.bat") { Copy-Item "build_local.bat" "package/" }
        if (Test-Path "installer.nsi") { Copy-Item "installer.nsi" "package/" }
        if (Test-Path "test_search.py") { Copy-Item "test_search.py" "package/" }
        if (Test-Path "test_all_types.js") { Copy-Item "test_all_types.js" "package/" }
        if (Test-Path "test_apartment.js") { Copy-Item "test_apartment.js" "package/" }
        if (Test-Path "test_pagination.js") { Copy-Item "test_pagination.js" "package/" }
        if (Test-Path "test_pagination_final.js") { Copy-Item "test_pagination_final.js" "package/" }
        if (Test-Path "test_single.js") { Copy-Item "test_single.js" "package/" }
        
        # 아이콘 파일
        if (Test-Path "assets/icon.ico") { 
            New-Item -ItemType Directory -Force -Path "package/assets"
            Copy-Item "assets/icon.ico" "package/assets/"
        }
        
        # 복사된 파일 목록 출력
        Write-Host "=== 복사된 파일 목록 ===" -ForegroundColor Green
        Get-ChildItem "package" -Recurse | ForEach-Object { Write-Host $_.FullName.Replace("$PWD\package\", "") }
        
    - name: Create batch files
      run: |
        echo '@echo off' > package/다방크롤러_실행.bat
        echo 'chcp 65001 >nul' >> package/다방크롤러_실행.bat
        echo 'echo ========================================' >> package/다방크롤러_실행.bat
        echo 'echo    Dabang Real Estate Crawler v2.0' >> package/다방크롤러_실행.bat
        echo 'echo ========================================' >> package/다방크롤러_실행.bat
        echo 'echo.' >> package/다방크롤러_실행.bat
        echo 'echo Main Features:' >> package/다방크롤러_실행.bat
        echo 'echo - Automatic property data collection from Dabang' >> package/다방크롤러_실행.bat
        echo 'echo - Excel file export' >> package/다방크롤러_실행.bat
        echo 'echo - Improved CSS selectors for accurate data parsing' >> package/다방크롤러_실행.bat
        echo 'echo - Disabled duplicate removal (collect all data)' >> package/다방크롤러_실행.bat
        echo 'echo.' >> package/다방크롤러_실행.bat
        echo 'echo 1. GUI Mode (Graphical Interface)' >> package/다방크롤러_실행.bat
        echo 'echo 2. CLI Mode (Command Line Interface)' >> package/다방크롤러_실행.bat
        echo 'echo 3. Edit Settings File' >> package/다방크롤러_실행.bat
        echo 'echo 4. View Logs' >> package/다방크롤러_실행.bat
        echo 'echo 5. Open Output Folder' >> package/다방크롤러_실행.bat
        echo 'echo.' >> package/다방크롤러_실행.bat
        echo 'set /p choice="Select option (1-5): "' >> package/다방크롤러_실행.bat
        echo 'if "%choice%"=="1" (' >> package/다방크롤러_실행.bat
        echo '    echo Starting GUI mode...' >> package/다방크롤러_실행.bat
        echo '    if exist "다방크롤러.exe" (' >> package/다방크롤러_실행.bat
        echo '        start "" "다방크롤러.exe"' >> package/다방크롤러_실행.bat
        echo '    ) else (' >> package/다방크롤러_실행.bat
        echo '        echo Error: 다방크롤러.exe not found!' >> package/다방크롤러_실행.bat
        echo '        echo Please check if the file exists in the current directory.' >> package/다방크롤러_실행.bat
        echo '        pause' >> package/다방크롤러_실행.bat
        echo '    )' >> package/다방크롤러_실행.bat
        echo ') else if "%choice%"=="2" (' >> package/다방크롤러_실행.bat
        echo '    echo CLI Mode Usage:' >> package/다방크롤러_실행.bat
        echo '    echo.' >> package/다방크롤러_실행.bat
        echo '    echo Basic Usage:' >> package/다방크롤러_실행.bat
        echo '    echo 다방크롤러_CLI.exe --region "region_name" --type "property_type" --limit count' >> package/다방크롤러_실행.bat
        echo '    echo.' >> package/다방크롤러_실행.bat
        echo '    echo Examples:' >> package/다방크롤러_실행.bat
        echo '    echo 다방크롤러_CLI.exe --region "Seoul Gangnam" --type "원룸" --limit 10' >> package/다방크롤러_실행.bat
        echo '    echo 다방크롤러_CLI.exe --region "Busan Haeundae" --type "아파트" --limit 20' >> package/다방크롤러_실행.bat
        echo '    echo.' >> package/다방크롤러_실행.bat
        echo '    echo Property Types: 원룸, 투룸, 아파트, 주택/빌라, 오피스텔' >> package/다방크롤러_실행.bat
        echo '    echo.' >> package/다방크롤러_실행.bat
        echo '    pause' >> package/다방크롤러_실행.bat
        echo ') else if "%choice%"=="3" (' >> package/다방크롤러_실행.bat
        echo '    echo Opening settings file...' >> package/다방크롤러_실행.bat
        echo '    if exist "config\settings.toml" (' >> package/다방크롤러_실행.bat
        echo '        notepad config\settings.toml' >> package/다방크롤러_실행.bat
        echo '    ) else (' >> package/다방크롤러_실행.bat
        echo '        echo Error: settings.toml not found!' >> package/다방크롤러_실행.bat
        echo '        pause' >> package/다방크롤러_실행.bat
        echo '    )' >> package/다방크롤러_실행.bat
        echo ') else if "%choice%"=="4" (' >> package/다방크롤러_실행.bat
        echo '    echo Opening logs folder...' >> package/다방크롤러_실행.bat
        echo '    if exist "logs\*.log" (' >> package/다방크롤러_실행.bat
        echo '        start "" logs' >> package/다방크롤러_실행.bat
        echo '    ) else (' >> package/다방크롤러_실행.bat
        echo '        echo No log files found.' >> package/다방크롤러_실행.bat
        echo '        pause' >> package/다방크롤러_실행.bat
        echo '    )' >> package/다방크롤러_실행.bat
        echo ') else if "%choice%"=="5" (' >> package/다방크롤러_실행.bat
        echo '    echo Opening output folder...' >> package/다방크롤러_실행.bat
        echo '    if exist "output\*.xlsx" (' >> package/다방크롤러_실행.bat
        echo '        start "" output' >> package/다방크롤러_실행.bat
        echo '    ) else (' >> package/다방크롤러_실행.bat
        echo '        echo No output files found.' >> package/다방크롤러_실행.bat
        echo '        pause' >> package/다방크롤러_실행.bat
        echo '    )' >> package/다방크롤러_실행.bat
        echo ') else (' >> package/다방크롤러_실행.bat
        echo '    echo Invalid selection.' >> package/다방크롤러_실행.bat
        echo '    pause' >> package/다방크롤러_실행.bat
        echo ')' >> package/다방크롤러_실행.bat
        
    - name: Create README for package
      run: |
        echo "# 다방 부동산 크롤러 Windows 패키지 v2.0" > package/README_Windows.txt
        echo "" >> package/README_Windows.txt
        echo "## 🚀 새로운 기능" >> package/README_Windows.txt
        echo "" >> package/README_Windows.txt
        echo "- ✅ 개선된 CSS 선택자로 더 정확한 데이터 파싱" >> package/README_Windows.txt
        echo "- ✅ 중복 제거 비활성화 (모든 데이터 수집)" >> package/README_Windows.txt
        echo "- ✅ TypeScript 파일 참고로 최적화된 선택자" >> package/README_Windows.txt
        echo "- ✅ 상세 페이지 기반 정확한 정보 추출" >> package/README_Windows.txt
        echo "- ✅ 주소, 부동산, 관리비, 등록일 필드 개선" >> package/README_Windows.txt
        echo "" >> package/README_Windows.txt
        echo "## 📦 설치 및 실행" >> package/README_Windows.txt
        echo "" >> package/README_Windows.txt
        echo "1. 다운로드한 폴더를 원하는 위치에 압축 해제" >> package/README_Windows.txt
        echo "2. `다방크롤러_실행.bat` 파일을 더블클릭하여 실행" >> package/README_Windows.txt
        echo "3. GUI 모드 또는 CLI 모드 선택" >> package/README_Windows.txt
        echo "" >> package/README_Windows.txt
        echo "## 🖥️ GUI 모드" >> package/README_Windows.txt
        echo "- 그래픽 인터페이스를 통한 쉬운 사용" >> package/README_Windows.txt
        echo "- 지역, 매물 타입, 수량 등을 마우스로 설정" >> package/README_Windows.txt
        echo "- 실시간 진행 상황 확인" >> package/README_Windows.txt
        echo "- 개선된 데이터 파싱으로 더 정확한 정보 수집" >> package/README_Windows.txt
        echo "" >> package/README_Windows.txt
        echo "## 💻 CLI 모드" >> package/README_Windows.txt
        echo "- 명령줄을 통한 고급 사용" >> package/README_Windows.txt
        echo "- 자동화 및 배치 처리에 적합" >> package/README_Windows.txt
        echo "- 사용법: `다방크롤러_CLI.exe --region \"지역명\" --type \"매물타입\" --limit 개수`" >> package/README_Windows.txt
        echo "" >> package/README_Windows.txt
        echo "## 📋 지원하는 매물 타입" >> package/README_Windows.txt
        echo "- 원룸" >> package/README_Windows.txt
        echo "- 투룸" >> package/README_Windows.txt
        echo "- 아파트" >> package/README_Windows.txt
        echo "- 주택/빌라" >> package/README_Windows.txt
        echo "- 오피스텔" >> package/README_Windows.txt
        echo "" >> package/README_Windows.txt
        echo "## ⚙️ 설정 파일" >> package/README_Windows.txt
        echo "- `config/settings.toml`: 기본 설정 파일" >> package/README_Windows.txt
        echo "- 필요에 따라 수정 가능" >> package/README_Windows.txt
        echo "" >> package/README_Windows.txt
        echo "## 📊 출력 파일" >> package/README_Windows.txt
        echo "- `output/`: 수집된 데이터가 Excel 파일로 저장됨" >> package/README_Windows.txt
        echo "- `logs/`: 실행 로그 파일" >> package/README_Windows.txt
        echo "- 파일명 형식: `dabang_지역명_YYYYMMDD_HHMMSS.xlsx`" >> package/README_Windows.txt
        echo "" >> package/README_Windows.txt
        echo "## 🔧 시스템 요구사항" >> package/README_Windows.txt
        echo "- Windows 10/11 (64비트)" >> package/README_Windows.txt
        echo "- 인터넷 연결 필요" >> package/README_Windows.txt
        echo "- 최소 4GB RAM 권장" >> package/README_Windows.txt
        echo "- Python 3.10+ (자동 설치됨)" >> package/README_Windows.txt
        echo "" >> package/README_Windows.txt
        echo "## 🐛 문제 해결" >> package/README_Windows.txt
        echo "- 실행이 안 되는 경우: Windows Defender 또는 바이러스 백신에서 예외 처리" >> package/README_Windows.txt
        echo "- 데이터 수집이 안 되는 경우: 인터넷 연결 확인 및 다방 웹사이트 접속 테스트" >> package/README_Windows.txt
        echo "- 파싱 오류가 있는 경우: 로그 파일 확인 후 재시도" >> package/README_Windows.txt
        echo "" >> package/README_Windows.txt
        echo "## 📝 변경사항" >> package/README_Windows.txt
        echo "- v2.0: TypeScript 파일 참고로 CSS 선택자 개선" >> package/README_Windows.txt
        echo "- v2.0: 상세 페이지 기반 정확한 정보 추출" >> package/README_Windows.txt
        echo "- v2.0: 중복 제거 비활성화로 모든 데이터 수집" >> package/README_Windows.txt
        echo "- v2.0: 주소, 부동산, 관리비, 등록일 필드 파싱 개선" >> package/README_Windows.txt
        echo "" >> package/README_Windows.txt
        echo "## 📄 라이선스" >> package/README_Windows.txt
        echo "이 소프트웨어는 교육 및 개인 사용 목적으로만 사용하세요." >> package/README_Windows.txt
        echo "상업적 사용 시 다방의 이용약관을 확인하세요." >> package/README_Windows.txt
        
                    - name: Create ZIP package
                  run: |
                    $version = $env:GITHUB_REF_NAME
                    if ($version -like "refs/tags/v*") {
                      $version = $version.Replace("refs/tags/v", "")
                    } else {
                      $version = "dev"
                    }
                    $zipName = "다방크롤러_Windows_v$version.zip"
                    
                    # 보안 정보 파일 생성
                    echo "# 다방크롤러 Windows 패키지 보안 정보" > package/SECURITY_INFO.txt
                    echo "## 파일 정보" >> package/SECURITY_INFO.txt
                    echo "- 패키지 버전: $version" >> package/SECURITY_INFO.txt
                    echo "- 빌드 날짜: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')" >> package/SECURITY_INFO.txt
                    echo "- 빌드 환경: GitHub Actions Windows Runner" >> package/SECURITY_INFO.txt
                    echo "- Python 버전: 3.12" >> package/SECURITY_INFO.txt
                    echo "" >> package/SECURITY_INFO.txt
                    echo "## 보안 검증" >> package/SECURITY_INFO.txt
                    echo "이 패키지는 다음 보안 조치를 적용했습니다:" >> package/SECURITY_INFO.txt
                    echo "1. UPX 압축 비활성화 (바이러스 백신 오탐 방지)" >> package/SECURITY_INFO.txt
                    echo "2. 불필요한 모듈 제외 (최소한의 필수 모듈만 포함)" >> package/SECURITY_INFO.txt
                    echo "3. Windows 네이티브 DLL 사용" >> package/SECURITY_INFO.txt
                    echo "4. 코드 서명 준비 (SHA256 해시 포함)" >> package/SECURITY_INFO.txt
                    echo "" >> package/SECURITY_INFO.txt
                    echo "## 바이러스 백신 예외 처리" >> package/SECURITY_INFO.txt
                    echo "이 파일이 바이러스로 감지되는 경우:" >> package/SECURITY_INFO.txt
                    echo "1. Windows Defender: 파일을 예외 목록에 추가" >> package/SECURITY_INFO.txt
                    echo "2. 기타 백신: 신뢰할 수 있는 파일로 등록" >> package/SECURITY_INFO.txt
                    echo "3. Google Drive: '신뢰할 수 있는 파일'로 표시" >> package/SECURITY_INFO.txt
                    echo "" >> package/SECURITY_INFO.txt
                    echo "## 소스 코드" >> package/SECURITY_INFO.txt
                    echo "이 프로그램의 소스 코드는 GitHub에서 공개되어 있습니다:" >> package/SECURITY_INFO.txt
                    echo "https://github.com/hsm-9946/dabang-crawler" >> package/SECURITY_INFO.txt
                    
                    # 바이러스 백신 예외 처리 가이드 생성
                    echo "# 바이러스 백신 예외 처리 가이드" > package/ANTIVIRUS_GUIDE.txt
                    echo "" >> package/ANTIVIRUS_GUIDE.txt
                    echo "## Google Drive" >> package/ANTIVIRUS_GUIDE.txt
                    echo "1. Google Drive에서 파일 우클릭" >> package/ANTIVIRUS_GUIDE.txt
                    echo "2. '다운로드' 선택" >> package/ANTIVIRUS_GUIDE.txt
                    echo "3. 경고 메시지가 나타나면 '다운로드 계속' 클릭" >> package/ANTIVIRUS_GUIDE.txt
                    echo "4. 또는 '신뢰할 수 있는 파일'로 표시" >> package/ANTIVIRUS_GUIDE.txt
                    echo "" >> package/ANTIVIRUS_GUIDE.txt
                    echo "## Windows Defender" >> package/ANTIVIRUS_GUIDE.txt
                    echo "1. Windows Defender 보안 센터 열기" >> package/ANTIVIRUS_GUIDE.txt
                    echo "2. '바이러스 및 위협 방지' 클릭" >> package/ANTIVIRUS_GUIDE.txt
                    echo "3. '바이러스 및 위협 방지 설정' 클릭" >> package/ANTIVIRUS_GUIDE.txt
                    echo "4. '설정 관리' 클릭" >> package/ANTIVIRUS_GUIDE.txt
                    echo "5. '제외 항목 추가 또는 제거' 클릭" >> package/ANTIVIRUS_GUIDE.txt
                    echo "6. '제외 항목 추가' 클릭" >> package/ANTIVIRUS_GUIDE.txt
                    echo "7. '파일' 선택 후 다방크롤러.exe 선택" >> package/ANTIVIRUS_GUIDE.txt
                    
                    # ZIP 파일 생성
                    Compress-Archive -Path "package/*" -DestinationPath $zipName -Force
                    
                    # ZIP 파일 해시 생성
                    $zipHash = Get-FileHash $zipName -Algorithm SHA256
                    Write-Host "ZIP 파일 SHA256: $($zipHash.Hash)" -ForegroundColor Green
                    
                    # 해시 정보를 별도 파일로 저장
                    echo "다방크롤러_Windows_v$version.zip" > "$zipName.sha256"
                    echo "SHA256: $($zipHash.Hash)" >> "$zipName.sha256"
                    echo "생성일시: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')" >> "$zipName.sha256"
        
    - name: Upload artifacts
      uses: actions/upload-artifact@v4  # v3에서 v4로 업데이트
      with:
        name: 다방크롤러-Windows-${{ matrix.python-version }}
        path: |
          *.zip
          dist/*.exe
        retention-days: 30
        
    - name: Create release (on tag)
      if: startsWith(github.ref, 'refs/tags/')
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: 다방크롤러 Windows v${{ github.ref_name }}
        body: "## 🚀 다방크롤러 Windows v${{ github.ref_name }} 릴리즈\n\n### 📦 다운로드\n- GUI 모드: `다방크롤러.exe`\n- CLI 모드: `다방크롤러_CLI.exe`\n\n### ✨ 주요 기능\n- 다방 부동산 매물 자동 수집\n- Excel 파일로 데이터 저장\n- GUI 및 CLI 모드 지원\n- 지역별, 매물 타입별 필터링\n- **개선된 CSS 선택자로 정확한 데이터 파싱**\n- **중복 제거 비활성화 (모든 데이터 수집)**\n- **TypeScript 파일 참고로 최적화된 선택자**\n\n### 🔧 설치 방법\n1. ZIP 파일 다운로드 및 압축 해제\n2. `다방크롤러_실행.bat` 실행\n3. GUI 또는 CLI 모드 선택\n\n### 📋 지원하는 매물 타입\n- 원룸, 투룸, 아파트, 주택/빌라, 오피스텔\n\n### 💻 CLI 사용법\n```bash\n다방크롤러_CLI.exe --region \"서울 강남\" --type \"원룸\" --limit 10\n다방크롤러_CLI.exe --region \"부산 해운대\" --type \"아파트\" --limit 20\n```\n\n### 🔧 시스템 요구사항\n- Windows 10/11 (64비트)\n- 인터넷 연결\n- 최소 4GB RAM\n- Python 3.10+ (자동 설치됨)\n\n### 📝 변경사항\n- v2.0: TypeScript 파일 참고로 CSS 선택자 개선\n- v2.0: 상세 페이지 기반 정확한 정보 추출\n- v2.0: 중복 제거 비활성화로 모든 데이터 수집\n- v2.0: 주소, 부동산, 관리비, 등록일 필드 파싱 개선"
        draft: false
        prerelease: false
